	{
	"info": {
		"_postman_id": "1bb42922-f3ff-4f27-9c90-c404bf923fc6",
		"name": "Archy XR Mobile API - Final",
		"description": "Production-ready mobile API collection for Archy XR with authentication, projects, and file management.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33467424",
		"_collection_link": "https://fyss11.postman.co/workspace/xrarchy-mobile~e4c46fe5-2e73-4454-b4f2-76578ec674a1/collection/33467424-1bb42922-f3ff-4f27-9c90-c404bf923fc6?action=share&source=collection_link&creator=33467424"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.user) {",
									"    pm.environment.set('user_id', response.data.user.id);",
									"    pm.environment.set('user_email', response.data.user.email);",
									"    console.log('üë§ User registered:', response.data.user.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"role\": \"User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Email (Helper)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/manual-confirm",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"manual-confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.session) {",
									"    pm.environment.set('access_token', response.data.session.accessToken);",
									"    pm.environment.set('refresh_token', response.data.session.refreshToken);",
									"    pm.environment.set('user_role', response.data.user.role);",
									"    console.log('üîë Login successful for:', response.data.user.email);",
									"    console.log('üë§ Role:', response.data.user.role);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.session) {",
									"    pm.environment.set('admin_token', response.data.session.accessToken);",
									"    pm.environment.set('admin_refresh', response.data.session.refreshToken);",
									"    console.log('üëë Admin login successful:', response.data.user.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Archivist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.session) {",
									"    pm.environment.set('archivist_token', response.data.session.accessToken);",
									"    pm.environment.set('archivist_refresh', response.data.session.refreshToken);",
									"    console.log('üìö Archivist login successful:', response.data.user.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{archivist_email}}\",\n  \"password\": \"{{archivist_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"newpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.session) {",
									"    pm.environment.set('access_token', response.data.session.accessToken);",
									"    pm.environment.set('refresh_token', response.data.session.refreshToken);",
									"    console.log('üîÑ Token refreshed successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìÅ Projects",
			"item": [
				{
					"name": "List Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.projects.length > 0) {",
									"    pm.environment.set('project_id', response.data.projects[0].id);",
									"    console.log('üìÅ Projects found:', response.data.totalCount);",
									"    console.log('üíæ Saved project ID:', response.data.projects[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.project) {",
									"    pm.environment.set('new_project_id', response.data.project.id);",
									"    console.log('‚úÖ Project created:', response.data.project.name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Eiffel Tower AR Experience\",\n  \"description\": \"Interactive AR tour of the Eiffel Tower with historical information\",\n  \"location\": {\n    \"latitude\": {{eiffel_latitude}},\n    \"longitude\": {{eiffel_longitude}},\n    \"name\": \"{{eiffel_name}}\",\n    \"address\": \"{{eiffel_address}}\",\n    \"description\": \"{{eiffel_description}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project (Mobile Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.project) {",
									"    pm.environment.set('mobile_new_project_id', response.data.project.id);",
									"    console.log('‚úÖ Mobile project created:', response.data.project.name);",
									"    console.log('üìç Location:', response.data.project.location);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Mobile Created Project\",\n  \"description\": \"This project was created via mobile API endpoint\",\n  \"location\": {\n    \"latitude\": {{eiffel_latitude}},\n    \"longitude\": {{eiffel_longitude}},\n    \"name\": \"{{eiffel_name}}\",\n    \"address\": \"{{eiffel_address}}\",\n    \"description\": \"{{eiffel_description}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Browse All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.projects.length > 0) {",
									"    const firstProject = response.data.projects[0];",
									"    pm.environment.set('browse_project_id', firstProject.id);",
									"    console.log('üîç Browse found', response.data.totalCount, 'projects');",
									"    console.log('üìÅ Projects with access:', response.data.projects.filter(p => p.canAccess).length);",
									"    console.log('üìå Assigned projects:', response.data.projects.filter(p => p.isAssigned).length);",
									"    console.log('üéØ Sample project for testing:', firstProject.name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/browse?page=1&limit=20&search=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"browse"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (starts from 1)"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Results per page (max 50)"
								},
								{
									"key": "search",
									"value": "",
									"description": "Search term for project name, description, or location"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Project Name\",\n  \"description\": \"Updated via Postman\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ÔøΩ Project Discovery",
			"item": [
				{
					"name": "User Browse All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success) {",
									"    console.log('üë§ User can browse', response.data.totalCount, 'total projects');",
									"    console.log('üìÅ User has access to', response.data.projects.filter(p => p.canAccess).length, 'projects');",
									"    console.log('üìå User is assigned to', response.data.projects.filter(p => p.isAssigned).length, 'projects');",
									"    ",
									"    // Show project access status",
									"    response.data.projects.forEach(project => {",
									"        const status = project.isAssigned ? '‚úÖ Assigned' : (project.canAccess ? 'üëÅÔ∏è Access' : 'üö´ No Access');",
									"        console.log(`${status}: ${project.name}`);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/browse?limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"browse"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Browse All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success) {",
									"    console.log('üëë Admin can browse', response.data.totalCount, 'total projects');",
									"    console.log('üîì Admin has access to ALL projects');",
									"    ",
									"    // Show all projects admin can access",
									"    response.data.projects.forEach(project => {",
									"        const assignStatus = project.isAssigned ? ' (Assigned)' : '';",
									"        console.log(`üè¢ ${project.name}${assignStatus} - ${project.stats.fileCount} files`);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/browse",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"browse"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success) {",
									"    console.log('üîç Search found', response.data.projects.length, 'matching projects');",
									"    console.log('üìù Search term:', response.data.filters.search);",
									"    ",
									"    response.data.projects.forEach(project => {",
									"        console.log(`üìÅ ${project.name} - ${project.description || 'No description'}`);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/browse?search=tower",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"browse"
							],
							"query": [
								{
									"key": "search",
									"value": "tower",
									"description": "Search for projects containing 'tower'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Compare: Assigned vs Browse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success) {",
									"    console.log('üìä COMPARISON: User Assigned vs Browse All');",
									"    console.log('');",
									"    console.log('üë§ Regular project list (assigned only):');",
									"    console.log('   - This shows only projects user is assigned to');",
									"    console.log('   - Limited view for non-admin users');",
									"    console.log('');",
									"    console.log('üîç Browse all projects:');",
									"    console.log('   - Shows all projects in the system');",
									"    console.log('   - Indicates which ones user can access');",
									"    console.log('   - Helps users discover available projects');",
									"    console.log('');",
									"    console.log(`üìà Total discoverable: ${response.data.totalCount} projects`);",
									"    console.log(`üîê User has access to: ${response.data.projects.filter(p => p.canAccess).length} projects`);",
									"    console.log(`üìã User is assigned to: ${response.data.projects.filter(p => p.isAssigned).length} projects`);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/browse",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"browse"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test browsing and discovery features for different user roles"
		},
		{
			"name": "ÔøΩüîí Permission Tests",
			"item": [
				{
					"name": "User Try Create Project (Should Fail)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Project\",\n  \"description\": \"This should fail\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Token Test",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjhMOWNtZnBPOGxqYnNhanoiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2pxaXB1cWR0aWllY2F5dHJsaXdqLnN1cGFiYXNlLmNvL2F1dGgvdjEiLCJzdWIiOiI4NmYxM2M4Ni0zZGRmLTRiNGMtYWU3YS1kMzI4ZDAzY2Y0NTUiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzU1Mjk4Mjk3LCJpYXQiOjE3NTUyOTQ2OTcsImVtYWlsIjoid2F4b3BhNDUxMkBjcm9uYWNrLmNvbSIsInBob25lIjoiIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZW1haWwiLCJwcm92aWRlcnMiOlsiZW1haWwiXX0sInVzZXJfbWV0YWRhdGEiOnsiZW1haWxfdmVyaWZpZWQiOnRydWUsInJvbGUiOiJVc2VyIn0sInJvbGUiOiJhdXRoZW50aWNhdGVkIiwiYWFsIjoiYWFsMSIsImFtciI6W3sibWV0aG9kIjoicGFzc3dvcmQiLCJ0aW1lc3RhbXAiOjE3NTUyOTQ2OTd9XSwic2Vzc2lvbl9pZCI6IjExMTEwODNmLTNjYjQtNDQ1NS1iOGQwLTZiNzJjYmEzZDM5YSIsImlzX2Fub255bW91cyI6ZmFsc2V9.QhySrhBvfGnokXtmN_iV21fsFXiyDi-Awm6gVlYSrlo",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üî• Admin Project Management",
			"item": [
				{
					"name": "Get All Projects (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.projects.length > 0) {",
									"    pm.environment.set('sample_project_id', response.data.projects[0].id);",
									"    console.log('üìÅ Found', response.data.projects.length, 'projects');",
									"    console.log('üéØ Set sample project ID:', response.data.projects[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.project) {",
									"    pm.environment.set('new_project_id', response.data.project.id);",
									"    console.log('‚ú® New project created:', response.data.project.name);",
									"    console.log('üÜî Project ID:', response.data.project.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Project from Postman\",\n  \"description\": \"This is a test project created via Postman API\",\n  \"location\": {\n    \"latitude\": 41.8902,\n    \"longitude\": 12.4922,\n    \"name\": \"Colosseum\",\n    \"address\": \"Piazza del Colosseo, 1, 00184 Roma RM, Italy\",\n    \"description\": \"Ancient Roman amphitheatre in the centre of the city of Rome\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project - Great Wall (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.project) {",
									"    pm.environment.set('great_wall_project_id', response.data.project.id);",
									"    console.log('üèØ Great Wall project created:', response.data.project.name);",
									"    console.log('üìç Location:', response.data.project.location_name);",
									"    console.log('üåç Coordinates:', response.data.project.latitude, response.data.project.longitude);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Great Wall AR Explorer\",\n  \"description\": \"Virtual exploration of the Great Wall of China with historical timeline\",\n  \"location\": {\n    \"latitude\": {{great_wall_latitude}},\n    \"longitude\": {{great_wall_longitude}},\n    \"name\": \"{{great_wall_name}}\",\n    \"address\": \"{{great_wall_address}}\",\n    \"description\": \"{{great_wall_description}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project Details (Admin)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/projects/{{sample_project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects",
								"{{sample_project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project (Admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Project Name\",\n  \"description\": \"This project has been updated via Postman API\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/projects/{{new_project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects",
								"{{new_project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success) {",
									"    console.log('üóëÔ∏è Project deleted:', response.data.deleted_project_name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/projects/{{new_project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects",
								"{{new_project_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Admin-only endpoints for complete project management"
		},
		{
			"name": "üöÄ Complete Mobile Workflow",
			"item": [
				{
					"name": "1. Register ‚Üí Login ‚Üí Browse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This is a documentation request showing the complete workflow",
									"console.log('üì± MOBILE APP WORKFLOW:');",
									"console.log('');",
									"console.log('1. üë§ Register User ‚Üí Create account');",
									"console.log('2. ‚úâÔ∏è Confirm Email ‚Üí Manual helper endpoint');",
									"console.log('3. üîë Login User ‚Üí Get access token');",
									"console.log('4. üì± Get Profile ‚Üí User details & stats');",
									"console.log('5. üìã List Assigned ‚Üí Projects user is assigned to');",
									"console.log('6. üîç Browse All ‚Üí Discover available projects');",
									"console.log('7. üè¢ Project Details ‚Üí Get specific project info');",
									"console.log('8. üìé List Files ‚Üí Files in accessible projects');",
									"console.log('9. üì• Download File ‚Üí Get download URL/stream');",
									"console.log('10. üîÑ Refresh Token ‚Üí Maintain session');",
									"console.log('11. üö™ Logout ‚Üí Clean session end');",
									"console.log('');",
									"console.log('üéØ KEY FEATURES:');",
									"console.log('   ‚Ä¢ Users can browse ALL projects (not just assigned)');",
									"console.log('   ‚Ä¢ Clear indication of access permissions');",
									"console.log('   ‚Ä¢ Location data with coordinates & descriptions');",
									"console.log('   ‚Ä¢ Comprehensive error handling with codes');",
									"console.log('   ‚Ä¢ File management with secure downloads');",
									"console.log('   ‚Ä¢ Role-based access control');",
									"console.log('');",
									"console.log('‚úÖ Run individual requests to test each step!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Mobile Project Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.project) {",
									"    pm.environment.set('workflow_project_id', response.data.project.id);",
									"    console.log('üèóÔ∏è Created project via mobile API:', response.data.project.name);",
									"    console.log('üìç Location stored:', response.data.project.location.name);",
									"    console.log('üìù Full location data available:', !!response.data.project.location.address);",
									"} else {",
									"    console.log('‚ùå Project creation failed:', response.error);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Workflow Test Project\",\n  \"description\": \"Testing the complete mobile workflow with location data and error handling\",\n  \"location\": {\n    \"latitude\": 51.5074,\n    \"longitude\": -0.1278,\n    \"name\": \"Big Ben\",\n    \"address\": \"Westminster, London SW1A 0AA, UK\",\n    \"description\": \"The iconic clock tower of the Palace of Westminster\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify New Project in Browse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success) {",
									"    const workflowProject = response.data.projects.find(p => p.name === 'Workflow Test Project');",
									"    if (workflowProject) {",
									"        console.log('‚úÖ New project appears in browse results');",
									"        console.log('üÜî Project ID:', workflowProject.id);",
									"        console.log('üìç Location data preserved:', workflowProject.location.name);",
									"        console.log('üîê Admin access confirmed:', workflowProject.canAccess);",
									"        pm.environment.set('verified_project_id', workflowProject.id);",
									"    } else {",
									"        console.log('‚ö†Ô∏è Project not found in browse results yet');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/browse?search=Workflow",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"browse"
							],
							"query": [
								{
									"key": "search",
									"value": "Workflow"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "End-to-end mobile app workflow testing"
		},
		{
			"name": "üì• Mobile File Download",
			"item": [
				{
					"name": "Get Download URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.file.downloadUrl) {",
									"    pm.environment.set('download_url', response.data.file.downloadUrl);",
									"    console.log('üîó Download URL generated for:', response.data.file.name);",
									"    console.log('‚è∞ Expires at:', response.data.file.expiresAt);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{sample_project_id}}/files/{{sample_file_id}}/download",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{sample_project_id}}",
								"files",
								"{{sample_file_id}}",
								"download"
							]
						}
					},
					"response": []
				},
				{
					"name": "Direct File Stream",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{sample_project_id}}/files/{{sample_file_id}}/download",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{sample_project_id}}",
								"files",
								"{{sample_file_id}}",
								"download"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test External Download URL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get('download_url')) {",
									"    console.log('‚ö†Ô∏è No download URL set. Run \\\"Get Download URL\\\" first.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{download_url}}",
							"host": [
								"{{download_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Mobile endpoints for downloading files from projects"
		},
		{
			"name": "üìé Files",
			"item": [
				{
					"name": "List Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.files && response.data.files.length > 0) {",
									"    pm.environment.set('sample_file_id', response.data.files[0].id);",
									"    console.log('üìÑ Files found:', response.data.files.length);",
									"    console.log('üìå Saved sample_file_id:', response.data.files[0].id);",
									"    console.log('üß≠ First file height:', response.data.files[0].height, 'rotation:', response.data.files[0].rotation);",
									"} else {",
									"    console.log('üì≠ No files found in project');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload File (with height/rotation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.file) {",
									"    pm.environment.set('uploaded_file_id', response.data.file.id);",
									"    console.log('üì§ Uploaded file ID:', response.data.file.id);",
									"    console.log('üìÅ File name:', response.data.file.name);",
									"    console.log('üß≠ Height:', response.data.file.height, 'meters');",
									"    console.log('üîÑ Rotation:', response.data.file.rotation, 'degrees');",
									"    console.log('üîó Storage path:', response.data.file.storage_path);",
									"} else {",
									"    console.log('‚ùå Upload failed:', response.error);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "",
									"description": "Select a file to upload"
								},
								{
									"key": "height",
									"value": "1.5000",
									"type": "text",
									"description": "Optional height in meters (e.g., 1.5000)"
								},
								{
									"key": "rotation",
									"value": "90.00",
									"type": "text",
									"description": "Optional rotation in degrees 0-360 (e.g., 90.00)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get File Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.file) {",
									"    console.log('üìÑ File metadata retrieved:');",
									"    console.log('  üìÅ Name:', response.data.file.name);",
									"    console.log('  üìè Size:', response.data.file.size, 'bytes');",
									"    console.log('  üè∑Ô∏è Type:', response.data.file.type);",
									"    console.log('  üß≠ Height:', response.data.file.height, 'meters');",
									"    console.log('  üîÑ Rotation:', response.data.file.rotation, 'degrees');",
									"    console.log('  üìç Lat/Lng:', response.data.file.latitude, response.data.file.longitude);",
									"    console.log('  üìÖ Created:', response.data.file.created_at);",
									"    pm.environment.set('current_file_height', response.data.file.height);",
									"    pm.environment.set('current_file_rotation', response.data.file.rotation);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}/files/{{sample_file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}",
								"files",
								"{{sample_file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update File (height/rotation only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.file) {",
									"    console.log('‚úÖ File updated successfully');",
									"    console.log('üìÅ File name:', response.data.file.name);",
									"    console.log('üß≠ New height:', response.data.file.height, 'meters');",
									"    console.log('üîÑ New rotation:', response.data.file.rotation, 'degrees');",
									"} else {",
									"    console.log('‚ùå Update failed:', response.error);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"height\": 2.25,\n  \"rotation\": 45\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}/files/{{sample_file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}",
								"files",
								"{{sample_file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear File Location Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.file) {",
									"    console.log('üßπ Location fields cleared');",
									"    console.log('üß≠ Height:', response.data.file.height);",
									"    console.log('üîÑ Rotation:', response.data.file.rotation);",
									"    console.log('üìç Lat/Lng:', response.data.file.latitude, response.data.file.longitude);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"height\": null,\n  \"rotation\": null,\n  \"latitude\": null,\n  \"longitude\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}/files/{{sample_file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}",
								"files",
								"{{sample_file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Thumbnail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('üñºÔ∏è Thumbnail retrieved successfully');",
									"    console.log('üìè Response size:', pm.response.responseSize, 'bytes');",
									"    console.log('üè∑Ô∏è Content-Type:', pm.response.headers.get('content-type'));",
									"} else {",
									"    console.log('‚ùå Thumbnail not found or error occurred');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}/files/{{sample_file_id}}/thumbnail",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}",
								"files",
								"{{sample_file_id}}",
								"thumbnail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success) {",
									"    console.log('üóëÔ∏è File deleted successfully');",
									"    console.log('üìÅ Deleted file:', response.data.deleted_file_name);",
									"    pm.environment.unset('uploaded_file_id');",
									"} else {",
									"    console.log('‚ùå Deletion failed:', response.error);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/projects/{{project_id}}/files/{{uploaded_file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"projects",
								"{{project_id}}",
								"files",
								"{{uploaded_file_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "File management endpoints with height/rotation support"
			},
		{
			"name": "üìÅ browse",
			"item": [
				{
					"name": "Browse Projects (public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/browse/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"browse",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Browse Files (public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/mobile/browse/files",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"mobile",
								"browse",
								"files"
							]
						}
					},
					"response": []
				}
			],
			"description": "Public read-only browse endpoints (no auth)."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log('üöÄ Request:', pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const response = pm.response.json();",
					"if (response.success) {",
					"    console.log('‚úÖ', pm.info.requestName, 'successful');",
					"} else {",
					"    console.log('‚ùå', pm.info.requestName, 'failed:', response.error);",
					"}",
					"pm.test('Response has success field', () => {",
					"    pm.expect(response).to.have.property('success');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "caxax53312@cronack.com",
			"type": "string"
		},
		{
			"key": "test_password",
			"value": "caxax53312",
			"type": "string"
		},
		{
			"key": "admin_email",
			"value": "cinani1527@cotasen.com",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "cinani1527",
			"type": "string"
		},
		{
			"key": "archivist_email",
			"value": "ratbblkjiu@wnbaldwy.com",
			"type": "string"
		},
		{
			"key": "archivist_password",
			"value": "ratbblkjiu",
			"type": "string"
		},
		{
			"key": "sample_project_id",
			"value": "01a97bfa-b270-4dfb-8976-b657dee1b3e9",
			"type": "string"
		},
		{
			"key": "sample_file_id",
			"value": "6",
			"type": "string"
		},
		{
			"key": "download_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "new_project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_file_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_download_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "colosseum_lat",
			"value": "41.8902",
			"type": "string"
		},
		{
			"key": "colosseum_lng",
			"value": "12.4922",
			"type": "string"
		},
		{
			"key": "eiffel_lat",
			"value": "48.8584",
			"type": "string"
		},
		{
			"key": "eiffel_lng",
			"value": "2.2945",
			"type": "string"
		},
		{
			"key": "browse_project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "mobile_new_project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "workflow_project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "verified_project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "uploaded_file_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "current_file_height",
			"value": "",
			"type": "string"
		},
		{
			"key": "current_file_rotation",
			"value": "",
			"type": "string"
		},
		{
			"key": "eiffel_latitude",
			"value": "48.8584",
			"type": "string"
		},
		{
			"key": "eiffel_longitude",
			"value": "2.2945",
			"type": "string"
		},
		{
			"key": "eiffel_name",
			"value": "Eiffel Tower",
			"type": "string"
		},
		{
			"key": "eiffel_address",
			"value": "Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France",
			"type": "string"
		},
		{
			"key": "eiffel_description",
			"value": "Iron lattice tower on the Champ de Mars",
			"type": "string"
		},
		{
			"key": "great_wall_latitude",
			"value": "40.4319",
			"type": "string"
		},
		{
			"key": "great_wall_longitude",
			"value": "116.5704",
			"type": "string"
		},
		{
			"key": "great_wall_name",
			"value": "Great Wall of China",
			"type": "string"
		},
		{
			"key": "great_wall_address",
			"value": "Huairou District, Beijing, China",
			"type": "string"
		},
		{
			"key": "great_wall_description",
			"value": "Ancient fortification system of walls and barriers",
			"type": "string"
		}
	]
}

